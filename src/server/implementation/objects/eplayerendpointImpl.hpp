/* Autogenerated with kurento-module-creator */

#ifndef __EPLAYERENDPOINT_IMPL_HPP__
#define __EPLAYERENDPOINT_IMPL_HPP__

#include "UriEndpointImpl.hpp"
#include "eplayerendpoint.hpp"
#include <EventHandler.hpp>
#include <boost/property_tree/ptree.hpp>
#include "EndOfStream.hpp"

namespace kurento
{
namespace module
{
namespace eplayerendpoint
{
class eplayerendpointImpl;
} /* eplayerendpoint */
} /* module */
} /* kurento */

namespace kurento
{
void Serialize (std::shared_ptr<kurento::module::eplayerendpoint::eplayerendpointImpl> &object, JsonSerializer &serializer);
} /* kurento */

namespace kurento
{
class MediaPipelineImpl;
} /* kurento */

namespace kurento
{
namespace module
{
namespace eplayerendpoint
{

class eplayerendpointImpl : public UriEndpointImpl, public virtual eplayerendpoint
{

public:

  eplayerendpointImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline, const std::string &filesrc, bool useEncodedMedia);

  virtual ~eplayerendpointImpl ();

  void play ();

  /* Next methods are automatically implemented by code generator */
  virtual bool connect (const std::string &eventType, std::shared_ptr<EventHandler> handler);
  virtual void invoke (std::shared_ptr<MediaObjectImpl> obj,
                       const std::string &methodName, const Json::Value &params,
                       Json::Value &response);

  sigc::signal<void, EndOfStream> signalEndOfStream;

  virtual void Serialize (JsonSerializer &serializer);

private:

  int signalEOS;
  int signalInvalidFileSrc;
  int signalInvalidMedia;

  std::function<void() > eosLambda;
  std::function<void() > invalidFileSrcLambda;
  std::function<void() > invalidMediaLambda;

  class StaticConstructor
  {
  public:
    StaticConstructor();
  };

  static StaticConstructor staticConstructor;

};

} /* eplayerendpoint */
} /* module */
} /* kurento */

#endif /*  __EPLAYERENDPOINT_IMPL_HPP__ */
